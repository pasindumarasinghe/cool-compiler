Write-up for PA3
----------------

* Line numbers are not handled since bison has default rules for deciding which line number to use.
* Note that "expression_list" and "expression_list_comma_seperated" are two different things and "expression_list" refers to block expressions ({[expr]+}) whereas "expression_list_comma_seperated" refers to comma seperated expressions (expr[[,expr]]*). 


============================
Ambiguity in "let" construct
============================

* In a situation similar to what is below, the parser can't decide whether to reduce or to shift.(S/R conflict)

let let_expression in expression .
let let_expression in (expression . '+' expression)

* Solved by introducing a lower precedence to 'in' than other operators. - https://www.gnu.org/software/bison/manual/html_node/Non-Operators.html


=======================
error handling/recovery - https://www.gnu.org/software/bison/manual/html_node/Error-Recovery.html
=======================
the strategy = (skip the rest of the current input line or current statement if an error is detected)

* When an error is found in a "Class", the parser skips parsing until ';'
* When an error is found in a feature, the parser skips parsing until ';'
* When an error is found in a formal, the parser skips parsing until ')'
* When an error is found in an expression inside a {..} block, the parser skips parsing until ';'

* error recovery in let statements - 
	let statements are considered to be of two types
		1. A let statement with only one variable.
		2. A let statement with multiple variables.

	In (1) where there is only one variable, if there is an error in the let binding, the parser skips parsing until the 'IN' (end of the construct).
	In (2) where there are multiple variables, if there is an error in a let binding, the parser skips parsing until the ',' (the start of the next variable)
