README file for Programming Assignment 2 (C++ edition)
=====================================================

Your directory should contain the following files:

 Makefile
 README
 cool.flex
 test.cl
 lextest.cc      -> [cool root]/src/PA2/lextest.cc
 mycoolc         -> [cool root]/PA2/mycoolc
 stringtab.cc    -> [cool root]/PA2/stringtab.cc
 utilities.cc    -> [cool root]/PA2/utilities.cc
 handle_flags.cc -> [cool root]/PA2/handle_flags.cc
 *.d             dependency files
 *.*             other generated files

The include (.h) files for this assignment can be found in 
[cool root]/PA2

	The Makefile contains targets for compiling and running your
	program. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to fill
	the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and
	why your test cases are adequate. It is part of the assignment
	to clearly and concisely explain things in text as well as to
	comment your code. Just edit this file.

	cool.flex is a skeleton file for the specification of the
	lexical analyzer. You should complete it with your regular
	expressions, patterns and actions. 

	test.cl is a COOL program that you can test the lexical
	analyzer on. It contains some errors, so it won't compile with
	coolc. However, test.cl does not exercise all lexical
	constructs of COOL and part of your assignment is to rewrite
	test.cl with a complete set of tests for your lexical analyzer.

	cool-parse.h contains definitions that are used by almost all parts
	of the compiler. DO NOT MODIFY.

	stringtab.{cc|h} and stringtab_functions.h contains functions
        to manipulate the string tables.  DO NOT MODIFY.

	utilities.{cc|h} contains functions used by the main() part of
	the lextest program. You may want to use the strdup() function
	defined in here. Remember that you should not print anything
	from inside cool.flex! DO NOT MODIFY.

	lextest.cc contains the main function which will call your
	lexer and print out the tokens that it returns.  DO NOT MODIFY.

	mycoolc is a shell script that glues together the phases of the
	compiler using Unix pipes instead of statically linking code.  
	While inefficient, this architecture makes it easy to mix and match
	the components you write with those of the course compiler.
	DO NOT MODIFY.	

        cool-lexer.cc is the scanner generated by flex from cool.flex.
        DO NOT MODIFY IT, as your changes will be overritten the next
        time you run flex.

 	The *.d files are automatically generated Makefiles that capture
 	dependencies between source and header files in this directory.
 	These files are updated automatically by Makefile; see the gmake
 	documentation for a detailed explanation.

Instructions
------------

	To compile your lextest program type:

	% make lexer

	Run your lexer by putting your test input in a file 'foo.cl' and
	run the lextest program:

	% ./lexer foo.cl

	To run your lexer on the file test.cl type:

	% make dotest

	If you think your lexical analyzer is correct and behaves like
	the one we wrote, you can actually try 'mycoolc' and see whether
	it runs and produces correct code for any examples.
	If your lexical analyzer behaves in an
	unexpected manner, you may get errors anywhere, i.e. during
	parsing, during semantic analysis, during code generation or
	only when you run the produced code on spim. So beware.

	If you change architectures you must issue

	% make clean

	when you switch from one type of machine to the other.
	If at some point you get weird errors from the linker,	
	you probably forgot this step.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA2
----------------

Test for "String constant too long"
===================================

*Random string used - "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"

* EOF in comment
* EOF in string
* Unmatched *)